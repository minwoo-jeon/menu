/*Maven 대신 Gradle 사용하는 이유
똑같이 라이브러리를 관리하지만 Gradle이 나중에 나온만큼

빌드할 때 훨씬 빠르고 설정하기 간결하다고 한다. */

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//JPA
	//java에 있는 객체들과 oracle 테이블 안의 데이터를 알맞게 연결(매핑)해주는 핵심적인 역할을 한다.
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//Thymeleaf
	//컨트롤러가 전달하는 데이터를 이용하여 동적으로 화면을 구성하게 해주는 View Template다.  프론트의 역할을 한다.
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	//Spring Boot Starter Web
	//Spring MVC를 사용한 RESTful서비스를 개발하는데 사용한다.
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	/* lombok을 쓰는이유
	보통 DTO나 Model, Entity의 경우 여러 속성(Attribute)이 존재하고 이들이 가지는 Property에
	대해 getter, setter, 생성자 등을 매번 작성해주어야 하는데 이러한 부분을 자동으로 만들어주는 Library이다.
	*/
	runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
